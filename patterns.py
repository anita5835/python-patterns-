# -*- coding: utf-8 -*-
"""patterns

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JDUQVN1d0fY0v5Ee5p31j42dkAHu3nU2
"""

# #1.Right-Angle Triangle
# How can you print a right-angle triangle using asterisks (*) in Python?
for i in range(1,6):
    print('*' * i)
# How can you modify your triangle to align to the right instead of the left?

for i in range(1,6):
  for i in range(1,i+1):
    print("*",end='')
  print()

# What would be the output of printing a right-angle triangle with a height of 5?
for i in range(1,6):
 print("*"* i)

n=4
for i in range(n,0,-1):
  for j in range(1,i+1):
    print("*",end=" ")
  print()

# How can you modify your triangle to align to the right instead of the left?
n=5
for i in range(1,n+1):
  for j in range(n-i):
    print(" ",end=" ")
  for k in range(1,i+1):
      print("*",end=" ")
  print()

# 2.Equilateral Triangle
# How can you create an equilateral triangle pattern using asterisks in Python?
n = 5  # Number of rows for the triangle
for i in range(1, n + 1):
    for j in range(n - i):
        print(" ", end="")
    for k in range(1, i + 1):
        print("*", end=" ")
    print()

n=5
for i in range(n,0,-1):
  for j in range(n-i):
    print(" ",end="")
  for k in range(1,i+1):
      print("*",end=" ")
  print()

# What algorithm would you use to center the asterisks in the triangle?
n = 5  # Height of the triangle

for i in range(1, n + 1):
    # Calculate the number of spaces and asterisks
    spaces = n - i
    asterisks = 2 * i - 1

    # Print spaces followed by asterisks
    print(' ' * spaces + '*' * asterisks)

n=5
for i in range(1,n):
  for j in range(n-i):
    print(" ",end="")
  for k in range(1,i+1):
    print("*",end=" ")
  print()
for i in range(n,0,-1):
  for j in range(n-i):
    print(" ",end="")
  for k in range(1,i+1):
     print("*",end=" ")
  print()

n=6
for i in range(1,n):
  for j in range(1,i+1):
    print(j,end="")
  print()

n=6
for i in range(1,n):
  for j in range(n-i):
    print(" ",end=" ")
  for k in range(1,i+1):
    print(k,end=" ")
  print()
for i in range(1,5):
  for j in range(1,i+1):
    print(j,end=" ")
  print()

n=6
num=1
for i in range(1,n):
  for j in range(1,i+1):
    print(num,end=" ")
    num+=1
  print()

for i in range(1,6):
  for j in range(65,65+i):
    print(chr(j),end="")
  print()

for i in range(1,6):
  for j in range(1,i+1):
    print(chr(64+i),end="")
  print()

for i in range(1,5):
  for j in range(1,5):
    if i==1 or i==5-1 or j==1 or j==5-1:
      print("*",end=" ")
    else:
      print(" ",end=" ")
  print()

for i in range(1,5):
  for j in range(i,5):
    print(chr(65+j),end=" ")
  print():::::

n=6
for i in range(n,0,-1):
  for j in range(n-i):
    print(" ",end=" ")
  for k in range(1,i+1):
    print(k,end=" ")
  print()

n=6
for i in range(n,0,-1):
  for j in range(n-i):
    print(" ",end=" ")
  for k in range(65,65+i):-----
    print(chr(65+i),end=" ")
  print()

# 3. Square
# Write a Python function to print a square of asterisks with a given side length.
for i in range(1,5):
  for j in range(1,5):
    print("*",end=" ")
  print()

# How would you modify the function to fill the square with a different character?
def square(length):
  for i in range(length):
    for j in range(length):
      if i==0 or i== length-1  or j==0 or j== length-1:

        print('*',end='')
      else:
        print('#', end='')
    print()


length=5
square(length)

# 4. Hollow Square
#  How can you create a hollow square using asterisks in Python?
length=5
for i in range(1,length):
 for j in range(1,length):
  if i==1 or i==length-1 or j==1 or j==length-1:
    print("*", end=" ")
  else:
   print(" ", end=" ")
 print()

# What changes would you need to make to handle even and odd side lengths
# differently?
length=5
for i in range(1,length):
 for j in range(1,length):
  if i==1 or i==length-1 or j==1 or j==length-1:
    print("*", end=" ")
  elif length % 2 == 1 and i == (length // 2) + 1:
                print("*", end=" ")
  else:
   print(" ", end=" ")
 print()

# 5. Pyramid
#  How can you print a pyramid pattern of asterisks in Python?
for i in range(6):
  # Calculate the number of spaces and asterisks
    spaces = 6 - i
    asterisks = 2 * i - 1

    # Print spaces followed by asterisks
    print(' ' * spaces + '*' * asterisks)

# Diamond Shape
#  Write a Python program to print a diamond shape using asterisks.
def diamond_shape(height):

    for i in range(height):

        print(' ' * (height - i - 1), end='')

        print('* ' * (i + 1))

    for i in range(height - 1):

        print(' ' * (i + 1), end='')

        print('* ' * (height - i - 1))


height = int(input("Enter the number of layers for the diamond: "))
diamond_shape(height)

for i in range(5,0,-1):
  for j in range(1,i+1):
    print("*",end='')
  print()

#fibonacci
def fib(rows):
  a,b=0,1
  for i in range(rows):
    row_fib=[]
    for j in range(i+1):
      row_fib.append(a)
      a,b=b,a+b
    print(' '.join(map(str,row_fib)))
print()

fib(8)
#to embed variable value in a string

# Delimiters are characters or sequences of characters used to define boundaries between different sections of text or data.
def join_strings(strings,delimeter):
  return delimeter.join(strings)
join_strings(["an","we"],'+')

def anagrams(s1,s2):
 return sorted(s1)==sorted(s2)
anagrams("listen","silent")

[x**2 for x in range(0,11)]

a=2
b=3
a, b = b, a
print(a)
print(b)

dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}
m= dict1 | dict2
print(m)

n=4
for i in range(1,n):
  for j in range(1,n):
   if i==1 or i== n-1 or j==1 or j==n-1:
    print("*",end=" ")
   else:
    print(" ",end=" ")
  print()

def rev(s):
  return s==s[::-1]
rev("hello")

a="hello"
upper=a.upper()
print(upper)
lower=a.lower()
print(lower)

a="hello world"
b=a[1:5]
print(b)

def a(n):
 return "".join(set(n))
a(n="hhelo")

def sub(s,sub):
  return s.find(sub)
sub(s="helloworld",sub="ello")

def sub(s,char):
  return s.count(char)
sub(s="helloworld",char="e")

def replace(s,old,new):
  return s.replace(old,new)
replace(s="hello",old='h',new='w')

# **Write a function that takes a list of strings and concatenates them into a single string with a
# specified delimiter.**
def string(strings,delimeter):
  return delimeter.join(strings)
result = string(["h", "e"], "*")
print(result)

import math

def find_lcm(a, b):
    return abs(a*b) // math.gcd(a, b)

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
print(f"LCM of {a} and {b} is {find_lcm(a, b)}.")

for i in range(5):
    print(i)

print("Done")

def unique_combinations():
    for i in range(1, 5):
        for j in range(i+1 , 5):
            print(f"({i}, {j})")

unique_combinations()

n_terms = 10
a, b = 0, 1

print(a, b, end=" ")
for _ in range(2, n_terms):  # Already printed two, so start from 2
    c = a + b
    print(c, end=" ")
    a, b = b, c  # Update for the next iteration

